Форматирование строк
====================

При работе со строками часто возникают ситуации, когда в шаблон строки
надо подставить разные данные.

Это можно делать объединяя, части строки и данные, но в Python есть
более удобный способ — форматирование строк.

Форматирование строк может помочь, например, в таких ситуациях:

* необходимо подставить значения в строку по определенному шаблону
* необходимо отформатировать вывод столбцами
* надо конвертировать числа в двоичный формат

Существует несколько вариантов форматирования строк:

* с оператором ``%`` — более старый вариант
* метод ``format()`` — относительно новый вариант
* f-строки — новый вариант, который появился в Python 3.6. 

Несмотря на то, что рекомендуется использовать метод ``format``, часто
можно встретить форматирование строк и через оператор ``%``.

Форматирование строк с методом format
-------------------------------------

Пример использования метода format:

.. code:: python

    In [1]: "interface FastEthernet0/{}".format('1')
    Out[1]: 'interface FastEthernet0/1'

Специальный символ ``{}`` указывает, что сюда подставится значение,
которое передается методу format. При этом каждая пара фигурных скобок
обозначает одно место для подстановки.

Значения, которые подставляются в фигурные скобки, могут быть разного
типа. Например, это может быть строка, число или список:

.. code:: python

    In [3]: print('{}'.format('10.1.1.1'))
    10.1.1.1

    In [4]: print('{}'.format(100))
    100

    In [5]: print('{}'.format([10, 1, 1,1]))
    [10, 1, 1, 1]

С помощью форматирования строк можно выводить результат столбцами. В
форматировании строк можно указывать, какое количество символов выделено
на данные. Если количество символов в данных меньше, чем выделенное
количество символов, недостающие символы заполняются пробелами.

Например, таким образом можно вывести данные столбцами одинаковой ширины
по 15 символов с выравниванием по правой стороне:

.. code:: python

    In [3]: vlan, mac, intf = ['100', 'aabb.cc80.7000', 'Gi0/1']

    In [4]: print("{:>15} {:>15} {:>15}".format(vlan, mac, intf))
                100  aabb.cc80.7000           Gi0/1

Выравнивание по левой стороне:

.. code:: python

    In [5]: print("{:15} {:15} {:15}".format(vlan, mac, intf))
    100             aabb.cc80.7000  Gi0/1

Шаблон для вывода может быть и многострочным:

.. code:: python

    In [6]: ip_template = '''
       ...: IP address:
       ...: {}
       ...: '''

    In [7]: print(ip_template.format('10.1.1.1'))

    IP address:
    10.1.1.1

С помощью форматирования строк можно также влиять на отображение чисел.

Например, можно указать, сколько цифр после запятой выводить:

.. code:: python

    In [9]: print("{:.3f}".format(10.0/3))
    3.333

С помощью форматирования строк можно конвертировать числа в двоичный
формат:

.. code:: python

    In [11]: '{:b} {:b} {:b} {:b}'.format(192, 100, 1, 1)
    Out[11]: '11000000 1100100 1 1'

При этом по-прежнему можно указывать дополнительные параметры, например,
ширину столбца:

.. code:: python

    In [12]: '{:8b} {:8b} {:8b} {:8b}'.format(192, 100, 1, 1)
    Out[12]: '11000000  1100100        1        1'

А также можно указать, что надо дополнить числа нулями, вместо пробелов:

.. code:: python

    In [13]: '{:08b} {:08b} {:08b} {:08b}'.format(192, 100, 1, 1)
    Out[13]: '11000000 01100100 00000001 00000001'

В фигурных скобках можно указывать имена. Это позволяет передавать
аргументы в любом порядке, а также делает шаблон более понятным:

.. code:: python

    In [15]: '{ip}/{mask}'.format(mask=24, ip='10.1.1.1')
    Out[15]: '10.1.1.1/24'

Еще одна полезная возможность форматирования строк - указание номера
аргумента:

.. code:: python

    In [16]: '{1}/{0}'.format(24, '10.1.1.1')
    Out[16]: '10.1.1.1/24'

За счет этого, например, можно избавиться от повторной передачи одних и
тех же значений:

.. code:: python

    In [19]: ip_template = '''
        ...: IP address:
        ...: {:<8} {:<8} {:<8} {:<8}
        ...: {:08b} {:08b} {:08b} {:08b}
        ...: '''

    In [20]: print(ip_template.format(192, 100, 1, 1, 192, 100, 1, 1))

    IP address:
    192      100      1        1
    11000000 01100100 00000001 00000001

В примере выше октеты адреса приходится передавать два раза - один для
отображения в десятичном формате, а второй - для двоичного.

Указав индексы значений, которые передаются методу format, можно
избавиться от дублирования:

.. code:: python

    In [21]: ip_template = '''
        ...: IP address:
        ...: {0:<8} {1:<8} {2:<8} {3:<8}
        ...: {0:08b} {1:08b} {2:08b} {3:08b}
        ...: '''

    In [22]: print(ip_template.format(192, 100, 1, 1))

    IP address:
    192      100      1        1
    11000000 01100100 00000001 00000001


Форматирование строк с помощью f-строк
--------------------------------------

В Python 3.6 добавился новый вариант форматирования строк - f-строки или
интерполяция строк. F-строки позволяют не только подставлять какие-то
значения в шаблон, но и позволяют выполнять вызовы функций, методов и
т.п.

Во многих ситуациях f-строки удобней и проще использовать, чем format,
кроме того, f-строки работают быстрее, чем format и другие методы
форматирования строк.


Синтаксис
~~~~~~~~~

F-строки — это литерал строки с буквой ``f`` перед ним. Внутри f-строки
в паре фигурных скобок указываются имена переменных, которые надо
подставить:

.. code:: python

    In [1]: ip = '10.1.1.1'

    In [2]: mask = 24

    In [3]: f"IP: {ip}, mask: {mask}"
    Out[3]: 'IP: 10.1.1.1, mask: 24'

    Аналогичный результат с format можно получить так:
    ``"IP: {ip}, mask: {mask}".format(ip=ip, mask=mask)``.

Очень важное отличие f-строк от format: f-строки — это выражение, которое
выполняется, а не просто строка. То есть, в случае с ipython, как только
мы написали выражение и нажали Enter, оно выполнилось и вместо выражений
``{ip}`` и ``{mask}`` подставились значения переменных.

Поэтому, например, нельзя сначала написать шаблон, а затем определить
переменные, которые используются в шаблоне:

.. code:: python

    In [1]: f"IP: {ip}, mask: {mask}"
    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)
    <ipython-input-1-e6f8e01ac9c4> in <module>()
    ----> 1 f"IP: {ip}, mask: {mask}"

    NameError: name 'ip' is not defined

Кроме подстановки значений переменных, в фигурных скобках можно писать
выражения:

.. code:: python

    In [5]: first_name = 'William'

    In [6]: second_name = 'Shakespeare'

    In [7]: f"{first_name.upper()} {second_name.upper()}"
    Out[7]: 'WILLIAM SHAKESPEARE'

После двоеточия в f-строках можно указывать те же значения, что и при
использовании format:

.. code:: python

    In [9]: oct1, oct2, oct3, oct4 = [10, 1, 1, 1]

    In [10]: print(f'''
        ...: IP address:
        ...: {oct1:<8} {oct2:<8} {oct3:<8} {oct4:<8}
        ...: {oct1:08b} {oct2:08b} {oct3:08b} {oct4:08b}''')

    IP address:
    10       1        1        1
    00001010 00000001 00000001 00000001

.. warning::

  Так как для полноценного объяснения f-строк, надо показывать
  примеры с циклами и работой с объектами, которые  еще не рассматривались,
  это тема также есть в разделе :ref:`f_string` с дополнительными примерами и пояснениями.

