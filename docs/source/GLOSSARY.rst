аргумент
--------

Аргумент - это фактическое значение (данные), которое передается функции
(или методу), при вызове.

атрибут
-------

итератор
--------

Итератор (iterator) - это объект, который возвращает свои элементы по
одному за раз.

С точки зрения Python, это любой объект, у которого есть метод
``__next__``. Этот метод возвращает следующий элемент, если он есть или
возвращает исключение StopIteration, когда элементы закончились.

Кроме того, итератор запоминает на каком объекте он остановился в
последнюю итерацию.

В Python у каждого итератора присутствует метод ``__iter__`` - то есть,
любой итератор является итерируемым объектом из которого можно поулчить
итератор. Этот метод просто возвращает сам итератор.

Подробнее об итераторах.

итерация
--------

Итерация - общий термин, который описывает процедуру взятия элементов
чего-то по очереди.

В более общем смысле, это последовательность инструкций, которая
повторяется определенное количество раз или до выполнения указанного
условия.

итерируемый объект
------------------

Итерируемый объект (iterable) - это объект из которого можно получить
итератор.

В Python за получение итератора отвечает функция iter():

.. code:: python

    In [1]: lista = [1, 2, 3]

    In [2]: iter(lista)
    Out[2]: <list_iterator at 0xb4ede28c>

Функция iter() отработает на любом объекте у которого есть метод
``__iter__`` или метод ``__getitem__``.

Метод ``__iter__`` возвращает итератор. Но, если этого метода нет,
функция iter() проверяет нет ли метода ``__getitem__`` - метод, который
позволяет получать элементы по индексу.

Если метод ``__getitem__`` есть, возвращается итератор, который
проходится по элементам используя индекс (начиная с 0).

На практике, использование метода ``__getitem__`` означает, что все
последовательности элементов - это итерируемые объекты. Например,
список, кортеж, строка.

метод
-----

Метод - это функция, которая относится к конкретному объекту. И
соответственно вызывается применимо к объекту.

Например, print - это функция:

.. code:: python

    In [11]: print('test')
    test

А append - это метод списка. Соответственно его можно вызывать только
применимо к объекту который является списком:

.. code:: python

    In [12]: list1 = [1, 2, 3]

    In [13]: list1.append(4)

объект
------

В Python все является объектом. Официальное определение - это сущность у
которой есть какое-то состояние и определенное поведение.

Примеры объектов: список, строка, файл и так далее.

Например, таким образом можно создать объект файл:

.. code:: python

    In [1]: f = open('output.py')

    In [2]: f
    Out[2]: <_io.TextIOWrapper name='output.py' mode='r' encoding='UTF-8'>

У этого объекта есть такие методы и атрибуты:

.. code:: python

    In [3]: print([m for m in dir(f) if not m.startswith('_')])
    ['buffer', 'close', 'closed', 'detach', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'line_buffering', 'mode', 'name', 'newlines', 'read', 'readable', 'readline', 'readlines', 'seek', 'seekable', 'tell', 'truncate', 'writable', 'write', 'writelines']

Объект f в данном случае, представляет реальный файл output.py. И
содержит методы и атрибуты, которые поддерживает Python по отношению к
файлам.

параметр
--------

Параметр - это переменная, которая используется, при создании функции.

последовательность
------------------

Последовательность (sequence) -

функция
-------

Функция - блок кода, который возвращает какое-то значение. Функция также
может принимать аргументы, которые влияют на выполнение кода в теле
функции.

Пример функции:

.. code:: python

    In [14]: def f(a, b):
        ...:     return a+b
        ...:

У функции f два параметра - a и b. Она возвращает сумму этих параметров.

При вызове функции с аргументами 5 и 10, она возвращает результат 15,
который присваивается в переменную result:

.. code:: python

    In [15]: result = f(5, 10)

    In [16]: result
    Out[16]: 15

